(()=>{"use strict";var t;!function(t){t.name="name",t.status="status",t.species="species",t.type="type",t.origin="origin",t.image="image",t.episode="episode"}(t||(t={}));class e extends HTMLElement{static get observedAttributes(){return Object.keys(t)}attributeChangedCallback(t,e,n){this[t]=n,this.render()}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML=`\n            <link rel="stylesheet" href="../src/components/character/character.css">\n            <section>\n            <div  class="card">\n            <div id="character">\n            <img id="img" src="${this.image?this.image:"Not found"}">\n            <div class="text">\n            <p class="name">${this.name}</p>\n            <p>${this.status}</p>\n            <p>${this.species}</p>\n            <p>${this.type}</p>\n            <p>${this.origin}</p>\n            <p>${this.episode}</p>\n            </div>\n            </div>\n</div>\n            \n            </section>\n            `)}}customElements.define("card-character",e);var n=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{c(i.next(t))}catch(t){r(t)}}function a(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((i=i.apply(t,e||[])).next())}))};class i extends HTMLElement{constructor(){super(),this.cards=[],this.dataApi=[],this.attachShadow({mode:"open"})}connectedCallback(){return n(this,void 0,void 0,(function*(){var t,e,n,i;this.dataApi=yield(t=void 0,e=void 0,n=void 0,i=function*(){try{return(yield fetch("https://rickandmortyapi.com/api/character").then((t=>t.json()))).results}catch(t){console.error(t)}},new(n||(n=Promise))((function(s,r){function o(t){try{c(i.next(t))}catch(t){r(t)}}function a(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((i=i.apply(t,e||[])).next())}))),this.render()}))}getEpisodeName(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(t);return(yield e.json()).name}catch(t){return console.error("Error fetching episode:",t),"Unknown"}}))}createCardsRickandMorty(e){return n(this,void 0,void 0,(function*(){this.cards=[];for(const n of this.dataApi.slice(0,e)){const e=this.ownerDocument.createElement("card-character");e.setAttribute(t.image,n.image),e.setAttribute(t.name,n.name),e.setAttribute(t.status,n.status),e.setAttribute(t.species,n.species),e.setAttribute(t.type,n.type),e.setAttribute(t.origin,n.origin.name);const i=yield this.getEpisodeName(n.episode[0]);e.setAttribute(t.episode,i),this.cards.push(e)}}))}render(){if(this.shadowRoot){this.shadowRoot.innerHTML=`\n            \n                <div>\n                    <input id="cardCount" type="number" placeholder="Enter number of cards" min="1" max="${this.dataApi.length}" />\n                    <button id="renderButton">Render Cards</button>\n                </div>\n                <div id="cardContainer"></div>\n            `;const t=this.shadowRoot.querySelector("#renderButton"),e=this.shadowRoot.querySelector("#cardCount"),n=this.shadowRoot.querySelector("#cardContainer");t.addEventListener("click",(()=>{const t=parseInt(e.value)||0;n.innerHTML="",this.createCardsRickandMorty(t).then((()=>{this.cards.forEach((t=>{n.appendChild(t)}))}))}))}}}customElements.define("app-container",i)})();